-- Programs ------------------------------------------------

entrypoints Program ;

Program.   Program ::= [TopDef] ;

TDFnDef.   TopDef ::= Type PIdent "(" [Arg] ")" Block ;

TDCDef.    TopDef ::= ClassDef ;

separator nonempty TopDef "" ;

Arg. 	   Arg ::= Type PIdent;

separator  Arg "," ;

-- Tokens --------------------------------------------------

position token TRet {"return"} ;

position token TWhile {"while"} ;

position token TIf {"if"} ;

position token TExclM '!' ;

position token TMinus '-' ;

position token TPlus '+' ;

position token TMulOp ('*' | '/' | '%') ;

position token TDIOp ({"++"} | {"--"}) ;

position token TRelOp ('<' | {"<="} | '>' | {">="} | {"=="} | {"!="}) ;

position token TLogAndOp {"&&"} ;

position token TLogOrOp {"||"} ;

position token PIdent (letter (letter|digit|'_'|'\'')*) ;

separator nonempty PIdent "," ;

-- Statements ----------------------------------------------

Block.      Block ::= "{" [Stmt] "}" ;

separator   Stmt "" ;

SEmpty.     Stmt ::= ";" ;

SBlock.     Stmt ::= Block ;

SDecl.      Stmt ::= Decl ;

INoInit.    Item ::= PIdent ;

IInit.      Item ::= PIdent "=" Expr ;

separator nonempty Item "," ;

SAss.       Stmt ::= Ref "=" Expr  ";" ;

SDIncr.      Stmt ::= PIdent TDIOp  ";" ;

SRet.       Stmt ::= TRet Expr ";" ;

SVRet.      Stmt ::= TRet ";" ;

SCond.      Stmt ::= TIf "(" Expr ")" Stmt  ;

SCondElse.  Stmt ::= TIf "(" Expr ")" Stmt "else" Stmt ;

SWhile.     Stmt ::= TWhile "(" Expr ")" Stmt ;

--SFor.       Stmt ::= "for" "(" Type Ident ":" Ident ")" Stmt ;

SExp.       Stmt ::= Expr  ";" ;

Decl.       Decl ::= Type [Item] ";" ;

-- Types ---------------------------------------------------

BIInt.      BinType ::= "int" ;

BIStr.      BinType ::= "string" ;

BIBool.     BinType ::= "boolean" ;

BIVoid.     BinType ::= "void" ;

CPType.      ClassType ::= PIdent ;

internal CType.  ClassType ::= Ident ;

--separator ClassType "," ;

TBuiltIn.   TypeName    ::= BinType ;

TClass.     TypeName    ::= ClassType ;

--TArray.    Type ::= Type "[]" ;

TType.     Type ::= TypeName ;

separator   Type "," ;

internal   TFun. Type ::= Type "(" [Type] ")" ;


-- Classes -------------------------------------------------

CDef.	ClassDef ::= "class" PIdent ClassBody ;

--CDefE.	ClassDef ::= "class" PIdent "extends" ClassType ClassBody ;

CBody.  ClassBody ::=  "{" [FieldDecl] "}";

CVar.   FieldDecl ::= Type [PIdent] ";" ;

--CMet.   FieldDecl ::= Type Ident "(" [Arg] ")" Block ;

separator FieldDecl "" ;

-- Expressions ---------------------------------------------

LInt.      Literal ::= Integer ;

LTrue.	   Literal ::= "true" ;

LFalse.	   Literal ::= "false" ;

LString.   Literal ::= String ;

--DimExpr.   DimExpr ::= "[" Expr "]";

--terminator nonempty DimExpr "";

--NArr.      New ::= "new" TypeName [DimExpr] ;

--EAArr.     Expr7 ::= Expr7 "[" Expr "]" ;

NClass.    New ::= "new" PIdent ;

RDot.      Ref  ::= PIdent "." PIdent ;

RVar.      Ref ::= PIdent ;

ENull.     Expr6  ::= Expr7 "null" ;

ERef.      Expr6 ::= Ref ;

ELit.      Expr6 ::= Literal ;

EApp.      Expr6 ::= PIdent "(" [Expr] ")" ;

ENew.      Expr6 ::= New ;

EUnOp.     Expr5 ::= UnOp Expr6 ;

EMul.      Expr4 ::= Expr4 TMulOp Expr5 ;

EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;

ERel.      Expr2 ::= Expr2 TRelOp Expr3 ;

EAnd.      Expr1 ::= Expr2 TLogAndOp Expr1 ;

EOr.       Expr ::= Expr1 TLogOrOp Expr ;

--coercions  Expr 7 ;

coercions  Expr 7 ;

separator  Expr "," ;

-- Operators -----------------------------------------------

OPlus.      AddOp ::= TPlus ;

OMinus.     AddOp ::= TMinus ;

ONeg.       UnOp ::= TMinus ;

ONot.       UnOp ::= TExclM ;

-- Comments ------------------------------------------------

comment    "#" ;

comment    "//" ;

comment    "/*" "*/" ;

